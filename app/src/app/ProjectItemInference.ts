import Log from "../core/Log";
import Utilities from "../core/Utilities";
import SemanticVersion from "../core/versioning/SemanticVersion";
import BehaviorManifestDefinition from "../minecraft/BehaviorManifestDefinition";
import DesignManifestDefinition from "../minecraft/DesignManifestDefinition";
import MinecraftUtilities from "../minecraft/MinecraftUtilities";
import { PackType } from "../minecraft/Pack";
import ResourceManifestDefinition from "../minecraft/ResourceManifestDefinition";
import SkinManifestDefinition from "../minecraft/SkinManifestDefinition";
import IFolder from "../storage/IFolder";
import StorageUtilities from "../storage/StorageUtilities";
import { ProjectRole } from "./IProjectData";
import { ProjectItemCreationType, ProjectItemStorageType, ProjectItemType } from "./IProjectItemData";
import Project, { AUTOGENERATED_CONTENT_TOKEN, FolderContext } from "./Project";

export default class ProjectItemInference {
  static async inferProjectItemsFromFolder(
    project: Project,
    folder: IFolder,
    fileSystemPrefix: string,
    folderContext: FolderContext,
    variantLabel: string | undefined,
    isInWorld: boolean,
    rootFolder: IFolder,
    depth: number,
    source?: string,
    force?: boolean,
    processingCallback?: (area: string) => void
  ) {
    if (
      project.projectFolder === null ||
      (folder.name.startsWith(".") && !folder.name.startsWith(".vscode") && !folder.name.startsWith(".mct"))
    ) {
      Log.debugAlert("Could not process folder: " + folder.storageRelativePath);
      return;
    }

    if (processingCallback) {
      processingCallback("Scanning '" + folder.storageRelativePath + "' for Minecraft project items.");
    }

    await folder.load(force ? force : false);

    let parentFolder = folder.parentFolder;

    if (parentFolder === project.projectFolder.parentFolder) {
      parentFolder = null;
    }

    const folderPathCanon = StorageUtilities.canonicalizePath(
      StorageUtilities.getFolderPath(folder.storageRelativePath)
    );

    const parentIsPacksRoot =
      parentFolder !== null &&
      parentFolder.name.indexOf("_packs") >= 0 &&
      (folderContext === FolderContext.behaviorPack ||
        folderContext === FolderContext.resourcePack ||
        folderContext === FolderContext.skinPack);

    const lastUnderscore = folder.storageRelativePath.lastIndexOf("_");

    if (!variantLabel && lastUnderscore >= 0 && parentIsPacksRoot) {
      // vanilla stores folders like:
      // chemistry
      // chemistry_1.20.50
      // chemistry_1.20.60
      // unify version variants with their parent

      let potentialVersionSection = folder.storageRelativePath.substring(lastUnderscore + 1);

      if (potentialVersionSection.endsWith("/")) {
        potentialVersionSection = potentialVersionSection.substring(0, potentialVersionSection.length - 1);
      }

      if (Utilities.isNumericIsh(potentialVersionSection) && potentialVersionSection.indexOf(".") > 0) {
        variantLabel = potentialVersionSection;
      }
    }

    if (
      folderPathCanon.indexOf("/checkpoint_input") >= 0 ||
      folderPathCanon.indexOf("/metadata") >= 0 ||
      folderPathCanon.indexOf("/type_definitions") >= 0 ||
      folderPathCanon.indexOf("/typedefs") >= 0 ||
      folderPathCanon.indexOf("/script_modules/") >= 0 ||
      folderPathCanon.indexOf("/vanilladata_modules/") >= 0 ||
      folderPathCanon.indexOf("/engine_modules/") >= 0 ||
      folderPathCanon.indexOf("/command_modules/") >= 0
    ) {
      folderContext = FolderContext.typeDefs;
    } else if (folderPathCanon.indexOf("/data/") >= 0 || folderPathCanon.indexOf("/forms/") >= 0) {
      folderContext = FolderContext.metaData;
    } else if (folderPathCanon.indexOf("/.vscode") >= 0) {
      folderContext = FolderContext.vscodeFolder;
    } else if (folderPathCanon.indexOf("/.mct") >= 0) {
      folderContext = FolderContext.mctoolsWorkingFolder;
    } else if (MinecraftUtilities.pathLooksLikeBehaviorPackName(folderPathCanon)) {
      folderContext = FolderContext.behaviorPack;
    } else if (MinecraftUtilities.pathLooksLikeDesignPackName(folderPathCanon)) {
      folderContext = FolderContext.designPack;
    } else if (MinecraftUtilities.pathLooksLikeSubPacksFolderName(folderPathCanon)) {
      // note this check must be above the .resourcePack check
      folderContext = FolderContext.resourcePackSubPack;
    } else if (MinecraftUtilities.pathLooksLikeResourcePackName(folderPathCanon)) {
      folderContext = FolderContext.resourcePack;
    } else if (
      MinecraftUtilities.pathLooksLikeSkinPackName(folderPathCanon) &&
      folderContext === FolderContext.unknown
    ) {
      folderContext = FolderContext.skinPack;
    } else if (
      MinecraftUtilities.pathLooksLikePersonaPackName(folderPathCanon) &&
      folderContext === FolderContext.unknown
    ) {
      folderContext = FolderContext.persona;
    } else if (
      MinecraftUtilities.pathLooksLikeWorldFolderName(folderPathCanon) &&
      folderContext === FolderContext.unknown
    ) {
      folderContext = FolderContext.world;
      isInWorld = true;
    } else if (
      (folderPathCanon.indexOf("/docs/") >= 0 ||
        folderPathCanon.indexOf("/@minecraft/") >= 0 ||
        folderPathCanon.indexOf("/mojang-commands") >= 0) &&
      folderContext === FolderContext.unknown
    ) {
      folderContext = FolderContext.docs;

      if (project.docsContainer === null) {
        project.docsContainer = folder.parentFolder;
      }
    }

    if (
      folderContext === FolderContext.unknown &&
      (folder.files["manifest.json"] || folder.files["pack_manifest.json"]) &&
      folder.files["skins.json"]
    ) {
      folderContext = FolderContext.skinPack;
    }

    if (
      folderContext === FolderContext.unknown &&
      (folder.files["manifest.json"] || folder.files["pack_manifest.json"]) &&
      !folder.files["level.dat"] &&
      !folder.files["levelname.txt"]
    ) {
      for (const folderName in folder.folders) {
        if (folderName) {
          if (folderName.toLowerCase() === "persona" || folderName.toLowerCase().startsWith("persona_")) {
            folderContext = FolderContext.persona;
          }
        }
      }
    }

    if (
      folderContext === FolderContext.unknown &&
      (folder.files["manifest.json"] || folder.files["pack_manifest.json"]) &&
      !folder.files["level.dat"] &&
      !folder.files["levelname.txt"]
    ) {
      if (
        folder.folders["models"] ||
        folder.folders["textures"] ||
        folder.folders["lighting"] ||
        folder.folders["subpacks"] ||
        folder.folders["assets"] ||
        folder.folders["sounds"] ||
        folder.folders["texture_sets"] ||
        folder.folders["sounds"] ||
        folder.folders["ui"]
      ) {
        folderContext = FolderContext.resourcePack;
      } else if (MinecraftUtilities.pathLooksLikeResourcePackName(folder.fullPath)) {
        folderContext = FolderContext.resourcePack;
      } else if (MinecraftUtilities.pathLooksLikeDesignPackName(folder.fullPath)) {
        folderContext = FolderContext.designPack;
      } else {
        folderContext = FolderContext.behaviorPack;
      }
    }

    if (
      folder.files["world_behavior_packs.json"] ||
      folder.files["world_resource_packs.json"] ||
      folder.files["levelname.txt"]
    ) {
      if (folderContext === FolderContext.unknown) {
        folderContext = FolderContext.world;
      }

      if (folder.parentFolder && !project.worldContainer) {
        project.worldContainer = folder.parentFolder;
      }
    }

    for (const fileName in folder.files) {
      const canonFileName = StorageUtilities.canonicalizeName(fileName);
      // console.log("Considering " + canonFileName + " in folder " + folder.storageRelativePath);

      if (canonFileName !== "gulpfile.js" && canonFileName !== "package-lock.json") {
        const candidateFile = folder.files[fileName];

        if (candidateFile !== undefined) {
          let pi = null;
          let projectPath = undefined;

          if (fileSystemPrefix.length > 0) {
            projectPath = fileSystemPrefix + candidateFile.fullPath;
            pi = project.getItemByProjectPath(projectPath);
          } else {
            const frPath = candidateFile.getFolderRelativePath(rootFolder);

            if (frPath !== undefined) {
              projectPath = StorageUtilities.canonicalizePath(frPath);

              pi = project.getItemByProjectPath(projectPath);
            }
          }

          if ((pi === undefined || pi === null) && projectPath !== undefined) {
            const fileExtension = candidateFile.type ? candidateFile.type.toLowerCase() : candidateFile.type;
            const baseName = StorageUtilities.getBaseFromName(candidateFile.name);
            const folderPath = StorageUtilities.canonicalizePath(StorageUtilities.getFolderPath(projectPath));
            const folderPathLower = folderPath.toLowerCase();
            const projectPathLower = projectPath.toLowerCase();
            const isResourcePack =
              folderContext === FolderContext.resourcePack || folderContext === FolderContext.resourcePackSubPack;

            if (canonFileName === "manifest.json" || canonFileName === "pack_manifest.json") {
              if (folderContext === FolderContext.world) {
                project.defaultWorldFolder = folder;
                project.worldContainer = parentFolder;
              }

              if (!candidateFile.isContentLoaded) {
                await candidateFile.loadContent(false);
              }

              let newPiType = ProjectItemType.unknown;
              let tag = "";

              if (folderContext === FolderContext.behaviorPack) {
                newPiType = ProjectItemType.behaviorPackManifestJson;
                tag = "behaviorpackmanifest";
              } else if (folderContext === FolderContext.resourcePack) {
                newPiType = ProjectItemType.resourcePackManifestJson;
                tag = "resourcepackmanifest";
              } else if (folderContext === FolderContext.designPack) {
                newPiType = ProjectItemType.designPackManifestJson;
                tag = "designpackmanifest";
              } else if (folderContext === FolderContext.skinPack) {
                newPiType = ProjectItemType.skinPackManifestJson;
                tag = "skinpackmanifest";
              } else if (folderContext === FolderContext.persona) {
                newPiType = ProjectItemType.personaManifestJson;
                tag = "personapackmanifest";
              } else if (folderContext === FolderContext.world) {
                newPiType = ProjectItemType.worldTemplateManifestJson;
                tag = "worldtemplatemanifest";
              }

              if (
                candidateFile.content !== undefined &&
                candidateFile.content !== "" &&
                !variantLabel &&
                typeof candidateFile.content === "string"
              ) {
                if (newPiType === ProjectItemType.behaviorPackManifestJson) {
                  const bpManifest = await BehaviorManifestDefinition.ensureOnFile(candidateFile);
                  if (bpManifest && bpManifest.id) {
                    project.defaultBehaviorPackUniqueId = bpManifest.id;

                    if (bpManifest.name) {
                      project.title = bpManifest.name;
                    }

                    if (bpManifest.description) {
                      project.description = bpManifest.description;
                    }

                    if (bpManifest.version) {
                      const sv = SemanticVersion.from(bpManifest.version);

                      if (sv) {
                        project.defaultBehaviorPackVersion = sv.asArray();

                        if (
                          project.defaultBehaviorPackVersion !== undefined &&
                          project.defaultBehaviorPackVersion.length >= 3
                        ) {
                          project.versionMajor = project.defaultBehaviorPackVersion[0];
                          project.versionMinor = project.defaultBehaviorPackVersion[1];
                          project.versionPatch = project.defaultBehaviorPackVersion[2];
                        }
                      }
                    }
                    project.defaultBehaviorPackFolder = folder;
                    project.behaviorPacksContainer = parentFolder;

                    const scriptModuleId = bpManifest.getScriptModule()?.uuid;
                    if (scriptModuleId) {
                      project.defaultScriptModuleUniqueId = scriptModuleId;
                    }

                    project.ensurePackByFolder(folder, PackType.behavior, isInWorld);
                  }
                } else if (newPiType === ProjectItemType.resourcePackManifestJson) {
                  const rpManifest = await ResourceManifestDefinition.ensureOnFile(candidateFile);
                  if (rpManifest && rpManifest.id) {
                    project.defaultResourcePackUniqueId = rpManifest.id;

                    if (rpManifest.name) {
                      project.title = rpManifest.name;
                    }

                    if (rpManifest.description) {
                      project.description = rpManifest.description;
                    }

                    if (rpManifest.version) {
                      const sv = SemanticVersion.from(rpManifest.version);

                      if (sv) {
                        project.defaultResourcePackVersion = sv.asArray();

                        if (
                          project.defaultResourcePackVersion !== undefined &&
                          project.defaultResourcePackVersion.length >= 3
                        ) {
                          project.versionMajor = project.defaultResourcePackVersion[0];
                          project.versionMinor = project.defaultResourcePackVersion[1];
                          project.versionPatch = project.defaultResourcePackVersion[2];
                        }
                      }
                    }
                    project.defaultResourcePackFolder = folder;
                    project.resourcePacksContainer = parentFolder;

                    const subpacks = rpManifest.subpacks;

                    if (subpacks) {
                      for (const subpack of subpacks) {
                        if (subpack.folder_name) {
                          const pv = project.ensureVariant(subpack.folder_name);

                          if (subpack.memory_performance_tier !== undefined) {
                            pv.memoryPerformanceTier = subpack.memory_performance_tier;
                          }

                          if (subpack.memory_tier !== undefined) {
                            pv.memoryTier = subpack.memory_tier;
                          }

                          if (subpack.name) {
                            pv.title = subpack.name;
                          }
                        }
                      }
                    }

                    project.ensurePackByFolder(folder, PackType.resource, isInWorld);
                  }
                } else if (newPiType === ProjectItemType.skinPackManifestJson) {
                  const spManifest = await SkinManifestDefinition.ensureOnFile(candidateFile);
                  if (spManifest) {
                    if (spManifest.name) {
                      project.title = spManifest.name;
                    }

                    if (spManifest.description) {
                      project.description = spManifest.description;
                    }

                    project.defaultSkinPackFolder = folder;
                    project.skinPacksContainer = parentFolder;

                    project.ensurePackByFolder(folder, PackType.skin, isInWorld);
                  }
                } else if (newPiType === ProjectItemType.designPackManifestJson) {
                  const dpManifest = await DesignManifestDefinition.ensureOnFile(candidateFile);
                  if (dpManifest) {
                    if (dpManifest.name) {
                      project.title = dpManifest.name;
                    }

                    if (dpManifest.description) {
                      project.description = dpManifest.description;
                    }

                    project.defaultDesignPackFolder = folder;
                    project.designPacksContainer = parentFolder;

                    project.ensurePackByFolder(folder, PackType.design, isInWorld);
                  }
                }
              }

              // Log.assert(newPiType !== ProjectItemType.unknown, "Unknown manifest.json file found.");
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                newPiType,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                tag,
                isInWorld
              );
            } else if (projectPathLower.endsWith("/scripts/index.js")) {
              if (!candidateFile.isContentLoaded) {
                await candidateFile.loadContent();
              }

              let creationType = ProjectItemCreationType.normal;

              if (
                candidateFile.content === undefined ||
                candidateFile.content === "" ||
                (typeof candidateFile.content === "string" &&
                  candidateFile.content.indexOf(AUTOGENERATED_CONTENT_TOKEN) >= 0)
              ) {
                creationType = ProjectItemCreationType.generated;
              }

              project.ensureItemByTag(
                "jsindex",
                "index.js",
                ProjectItemType.catalogIndexJs,
                projectPath,
                ProjectItemStorageType.singleFile,
                creationType,
                candidateFile,
                isInWorld
              );
            } else if (
              projectPathLower.endsWith(".mctp.json") &&
              folderContext === FolderContext.mctoolsWorkingFolder
            ) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.mcToolsProjectPreferences,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (projectPathLower.endsWith("tasks.json") && folderContext === FolderContext.vscodeFolder) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.vsCodeTasksJson,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (projectPathLower.endsWith("launch.json") && folderContext === FolderContext.vscodeFolder) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.vsCodeLaunchJson,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (projectPathLower.endsWith("settings.json") && folderContext === FolderContext.vscodeFolder) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.vsCodeSettingsJson,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (projectPathLower.endsWith("extensions.json") && folderContext === FolderContext.vscodeFolder) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.vsCodeExtensionsJson,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (projectPathLower.endsWith("/tick.json")) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.tickJson,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (
              projectPathLower.endsWith("/levelname.txt") ||
              projectPathLower.endsWith("/current") ||
              projectPathLower.endsWith("/log") ||
              projectPathLower.endsWith("/log.old") ||
              projectPathLower.endsWith("/lock") ||
              projectPathLower.indexOf("/db/manifest") >= 0 ||
              projectPathLower.indexOf("/db/lost/manifest") >= 0
            ) {
              // don't explicitly create an item for constituent world files at the moment
            } else if (fileExtension === "ldb" || fileExtension === "log") {
              // don't explicitly create an item for ldb or log files at the moment.
            } else if (fileExtension === "mcstructure") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.structure,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "mcfunction") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCFunction,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "material") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.material,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "vertex") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.materialVertex,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "fragment") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.materialFragment,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "geometry") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.materialGeometry,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (
              canonFileName === "level.dat" &&
              fileSystemPrefix.indexOf(".mcworld") < 0 && // don't create a project item if we're inside of a mcworld/mctemplate since that broader item has a link already
              fileSystemPrefix.indexOf(".mctemplate") < 0 &&
              folderContext !== FolderContext.behaviorPack
            ) {
              isInWorld = true;
              project.ensureItemByProjectPath(
                folderPath,
                ProjectItemStorageType.folder,
                candidateFile.name,
                ProjectItemType.worldFolder,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (canonFileName === "just.config.ts") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.justConfigTs,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (canonFileName === "eslint.config.mjs") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.esLintConfigMjs,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "js") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.js,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "ts") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.ts,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "mcworld") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCWorld,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (fileExtension === "mcproject") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCProject,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (fileExtension === "mctemplate") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCTemplate,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (fileExtension === "mcaddon") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCAddon,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (fileExtension === "mcpack") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.MCPack,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (fileExtension === "zip") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.zip,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );

              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            } else if (
              fileExtension === "png" ||
              fileExtension === "jpg" ||
              fileExtension === "gif" ||
              fileExtension === "psd" ||
              fileExtension === "hdr" ||
              fileExtension === "jpeg" ||
              fileExtension === "tga"
            ) {
              let imageType = ProjectItemType.image;

              if (folderPathLower.indexOf("/marketing art/") >= 0) {
                imageType = ProjectItemType.marketingAssetImage;
              } else if (folderPathLower.indexOf("/store art/") >= 0) {
                imageType = ProjectItemType.storeAssetImage;
              } else if (folderPathLower.indexOf("/textures/ui/") >= 0) {
                imageType = ProjectItemType.uiTexture;
              } else if (folderPathLower.indexOf("/design_textures/") >= 0) {
                imageType = ProjectItemType.designTexture;
              } else if (folderPathLower.indexOf("/textures/") >= 0 || folderContext === FolderContext.skinPack) {
                imageType = ProjectItemType.texture;
              } else if (baseName === "pack_icon" || folder.files["manifest.json"]) {
                imageType = ProjectItemType.packIconImage;
              }

              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                imageType,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (
              fileExtension === "ogg" ||
              fileExtension === "flac" ||
              fileExtension === "fsb" ||
              fileExtension === "mp3" ||
              fileExtension === "wav"
            ) {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.audio,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "env" && baseName === "") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.env,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "lang") {
              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                candidateFile.name,
                ProjectItemType.lang,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else if (fileExtension === "json") {
              let newJsonType = ProjectItemType.unknownJson;
              let itemName = candidateFile.name;

              if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/loot_tables/") >= 0) {
                newJsonType = ProjectItemType.lootTableBehavior;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/dialogue/") >= 0) {
                newJsonType = ProjectItemType.dialogueBehaviorJson;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/recipes/") >= 0) {
                newJsonType = ProjectItemType.recipeBehavior;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/spawn_rules/") >= 0
              ) {
                newJsonType = ProjectItemType.spawnRuleBehavior;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/cameras/") >= 0 &&
                folderPathLower.indexOf("aim_assist_preset") >= 0
              ) {
                newJsonType = ProjectItemType.aimAssistPresetJson;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/aim_assist/categories/") >= 0
              ) {
                newJsonType = ProjectItemType.aimAssistCategoryJson;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/aim_assist/presets/") >= 0
              ) {
                newJsonType = ProjectItemType.aimAssistPresetJson;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/behavior_trees/") >= 0
              ) {
                newJsonType = ProjectItemType.behaviorTreeJson;
              } else if (folderPathLower.indexOf("/spawn_groups/") >= 0) {
                newJsonType = ProjectItemType.spawnGroupJson;
              } else if (isResourcePack && folderPathLower.indexOf("/atmospherics/") >= 0) {
                newJsonType = ProjectItemType.atmosphericsJson;
              } else if (isResourcePack && folderPathLower.indexOf("/point_lights/") >= 0) {
                newJsonType = ProjectItemType.pointLightsJson;
              } else if (isResourcePack && folderPathLower.indexOf("/color_grading/") >= 0) {
                newJsonType = ProjectItemType.colorGradingJson;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/cameras/") >= 0) {
                newJsonType = ProjectItemType.cameraBehaviorJson;
              } else if (folderContext === FolderContext.resourcePack && folderPathLower.indexOf("/cameras/") >= 0) {
                newJsonType = ProjectItemType.cameraResourceJson;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/trading/") >= 0) {
                newJsonType = ProjectItemType.tradingBehaviorJson;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/animation_controllers/") >= 0
              ) {
                newJsonType = ProjectItemType.animationControllerBehaviorJson;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/animations/") >= 0) {
                newJsonType = ProjectItemType.animationBehaviorJson;
              } else if (
                isResourcePack &&
                (folderPathLower.indexOf("/models/") >= 0 ||
                  baseName.endsWith(".geo") ||
                  baseName.endsWith(".geometry"))
              ) {
                newJsonType = ProjectItemType.modelGeometryJson;
              } else if (baseName.endsWith(".mci")) {
                newJsonType = ProjectItemType.contentIndexJson;
              } else if (baseName.endsWith(".mcr")) {
                newJsonType = ProjectItemType.contentReportJson;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/dimension/") >= 0) {
                newJsonType = ProjectItemType.dimensionJson;
              } else if (
                (folderContext === FolderContext.behaviorPack || folderContext === FolderContext.unknown) &&
                folderPathLower.indexOf("/features/") >= 0
              ) {
                newJsonType = ProjectItemType.featureBehavior;
              } else if (
                (folderContext === FolderContext.behaviorPack || folderContext === FolderContext.unknown) &&
                folderPathLower.indexOf("/feature_rules/") >= 0
              ) {
                newJsonType = ProjectItemType.featureRuleBehavior;
              } else if (isResourcePack && folderPathLower.indexOf("/animation_controllers/") >= 0) {
                newJsonType = ProjectItemType.animationControllerResourceJson;
              } else if (isResourcePack && folderPathLower.indexOf("/animations/") >= 0) {
                newJsonType = ProjectItemType.animationResourceJson;
              } else if (folderPathLower.indexOf("/attachables/") >= 0) {
                newJsonType = ProjectItemType.attachableResourceJson;
              } else if (isResourcePack && folderPathLower.indexOf("/fogs/") >= 0) {
                newJsonType = ProjectItemType.fogResourceJson;
              } else if (isResourcePack && folderPathLower.indexOf("/particles/") >= 0) {
                newJsonType = ProjectItemType.particleJson;
              } else if (isResourcePack && folderPathLower.indexOf("/render_controllers/") >= 0) {
                newJsonType = ProjectItemType.renderControllerJson;
              } else if (isResourcePack && folderPathLower.indexOf("/block_culling/") >= 0) {
                newJsonType = ProjectItemType.blockCulling;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                projectPathLower.indexOf("/item_catalog/crafting_item_catalog") >= 0
              ) {
                newJsonType = ProjectItemType.craftingItemCatalog;
              } else if (
                isResourcePack &&
                (projectPathLower.endsWith("terrain_texture.json") ||
                  projectPathLower.endsWith("terrain_textures.json"))
              ) {
                newJsonType = ProjectItemType.terrainTextureCatalogResourceJson;
              } else if (isResourcePack && projectPathLower.endsWith("_global_variables.json")) {
                newJsonType = ProjectItemType.globalVariablesJson;
              } else if (isResourcePack && projectPathLower.endsWith("flipbook_textures.json")) {
                newJsonType = ProjectItemType.flipbookTexturesJson;
              } else if (
                isResourcePack &&
                (projectPathLower.endsWith("item_texture.json") || projectPathLower.endsWith("item_textures.json"))
              ) {
                newJsonType = ProjectItemType.itemTextureJson;
              } else if (baseName === "contents") {
                newJsonType = ProjectItemType.contentsJson;
              } else if (folderContext === FolderContext.skinPack && projectPathLower.endsWith("skins.json")) {
                newJsonType = ProjectItemType.skinCatalogJson;
              } else if (isResourcePack && folderPathLower.indexOf("/materials/") >= 0) {
                newJsonType = ProjectItemType.materialSetJson;
              } else if (
                isResourcePack &&
                folderPathLower.indexOf("/sounds/") >= 0 &&
                baseName === "sound_definitions"
              ) {
                newJsonType = ProjectItemType.soundDefinitionCatalog;
              } else if (
                isResourcePack &&
                folderPathLower.indexOf("/sounds/") >= 0 &&
                baseName === "music_definitions"
              ) {
                newJsonType = ProjectItemType.musicDefinitionJson;
              } else if (folderPathLower.indexOf("/texts/") >= 0 && baseName === "languages") {
                newJsonType = ProjectItemType.languagesCatalogJson;
              } else if (isResourcePack && folderPathLower.indexOf("/textures/ui/") >= 0) {
                newJsonType = ProjectItemType.ninesliceJson;
              } else if (isResourcePack && folderPathLower.indexOf("/texture_sets/") >= 0) {
                newJsonType = ProjectItemType.textureSetJson;
              } else if (isResourcePack && folderPathLower.indexOf("/lighting/") >= 0) {
                newJsonType = ProjectItemType.lightingJson;
              } else if (isResourcePack && folderPathLower.indexOf("/point_lights/") >= 0) {
                newJsonType = ProjectItemType.lightingJson;
              } else if (isResourcePack && folderPathLower.indexOf("/pbr/") >= 0) {
                newJsonType = ProjectItemType.pbrJson;
              } else if (isResourcePack && folderPathLower.indexOf("/water/") >= 0) {
                newJsonType = ProjectItemType.waterJson;
              } else if (isResourcePack && folderPathLower.indexOf("/shadows/") >= 0) {
                newJsonType = ProjectItemType.shadowsJson;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/worldgen/jigsaw_structures/") >= 0
              ) {
                newJsonType = ProjectItemType.jigsawStructure;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/worldgen/structure_sets/") >= 0
              ) {
                newJsonType = ProjectItemType.jigsawStructureSet;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/worldgen/template_pools/") >= 0
              ) {
                newJsonType = ProjectItemType.jigsawTemplatePool;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                folderPathLower.indexOf("/worldgen/processors/") >= 0
              ) {
                newJsonType = ProjectItemType.jigsawProcessorList;
              } else if (isResourcePack && folderPathLower.indexOf("/ui/") >= 0) {
                newJsonType = ProjectItemType.uiJson;
              } else if (folderContext === FolderContext.docs && baseName === "example_files") {
                newJsonType = ProjectItemType.fileListArrayJson;
              } else if (isResourcePack && baseName === "biomes_client") {
                newJsonType = ProjectItemType.biomesClientCatalogResource;
              } else if (isResourcePack && folderPathLower.indexOf("/biomes/") >= 0) {
                newJsonType = ProjectItemType.biomeResource;
              } else if (folderPathLower.indexOf("/biomes/") >= 0) {
                newJsonType = ProjectItemType.biomeBehavior;
              } else if (isResourcePack && baseName === "blocks") {
                newJsonType = ProjectItemType.blocksCatalogResourceJson;
              } else if (
                isResourcePack &&
                (projectPathLower.endsWith("texture_list.json") || projectPathLower.endsWith("textures_list.json"))
              ) {
                newJsonType = ProjectItemType.textureListJson;
              } else if (isResourcePack && projectPathLower.endsWith("texture_set.json")) {
                newJsonType = ProjectItemType.textureSetJson;
              } else if (isResourcePack && folderPathLower.indexOf("/items/") >= 0) {
                newJsonType = ProjectItemType.itemTypeLegacyResource;
              } else if (isResourcePack && baseName === "sounds") {
                newJsonType = ProjectItemType.soundCatalog;
              } else if (baseName === "education") {
                newJsonType = ProjectItemType.educationJson;
              } else if (baseName === "world_behavior_packs") {
                newJsonType = ProjectItemType.behaviorPackListJson;
              } else if (baseName === "world_resource_packs") {
                newJsonType = ProjectItemType.resourcePackListJson;
              } else if (baseName === "world_behavior_pack_history") {
                newJsonType = ProjectItemType.behaviorPackHistoryListJson;
              } else if (baseName === "world_resource_pack_history") {
                newJsonType = ProjectItemType.resourcePackHistoryListJson;
              } else if (baseName === "tsconfig") {
                newJsonType = ProjectItemType.tsconfigJson;
              } else if (baseName === "docfx") {
                newJsonType = ProjectItemType.docfxJson;
              } else if (baseName === "jsdoc") {
                newJsonType = ProjectItemType.jsdocJson;
              } else if (baseName === "jsconfig") {
                newJsonType = ProjectItemType.jsconfigJson;
              } else if (baseName === "package") {
                newJsonType = ProjectItemType.packageJson;
              } else if (baseName === "package.lock") {
                newJsonType = ProjectItemType.packageLockJson;
              } else if (baseName === ".prettierrc") {
                newJsonType = ProjectItemType.prettierRcJson;
              } else if (folderPathLower.indexOf("/persona/") >= 0) {
                newJsonType = ProjectItemType.personaJson;
              } else if (folderPathLower.indexOf("/sdl_layouts/") >= 0) {
                newJsonType = ProjectItemType.sdlLayout;
              } else if (folderPathLower.indexOf("/renderer/") >= 0) {
                newJsonType = ProjectItemType.rendererJson;
              } else if (folderPathLower.indexOf("/sdl_layouts/") >= 0) {
                newJsonType = ProjectItemType.sdlLayout;
              } else if (baseName === "splashes") {
                newJsonType = ProjectItemType.splashesJson;
              } else if (baseName === "loading_messages") {
                newJsonType = ProjectItemType.loadingMessagesJson;
              } else if (isResourcePack && baseName === "font_metadata") {
                newJsonType = ProjectItemType.fontMetadataJson;
              } else if (isResourcePack && baseName === "emoticons") {
                newJsonType = ProjectItemType.emoticonsJson;
              } else if (folderContext === FolderContext.skinPack && baseName === "geometry") {
                newJsonType = ProjectItemType.skinPackGeometryJson;
              } else if (baseName === "texture_backwards_compatibility_mapping") {
                newJsonType = ProjectItemType.skinPackTextureBackCompatJson;
              } else if (baseName === "uniforms") {
                newJsonType = ProjectItemType.uniformsJson;
              } else if (folderContext === FolderContext.docs && baseName === "info") {
                newJsonType = ProjectItemType.docInfoJson;
                project.role = ProjectRole.documentation;

                itemName = StorageUtilities.getLeafName(folderPath);
              } else if (isResourcePack && folderPathLower.indexOf("/textures/") >= 0) {
                newJsonType = ProjectItemType.ninesliceJson;
              } else if (
                folderContext === FolderContext.docs &&
                (baseName === "_example_files" || baseName === "example_files")
              ) {
                newJsonType = ProjectItemType.fileListArrayJson;
                project.role = ProjectRole.documentation;

                itemName = StorageUtilities.getLeafName(folderPath);
              } else if (folderContext === FolderContext.typeDefs && folderPathLower.indexOf("/command_modules") >= 0) {
                newJsonType = ProjectItemType.commandSetDefinitionJson;
                project.role = ProjectRole.documentation;
              } else if (
                (folderContext === FolderContext.metaData && folderPathLower.indexOf("/forms") >= 0) ||
                projectPathLower.endsWith(".form.json")
              ) {
                newJsonType = ProjectItemType.dataForm;
                project.role = ProjectRole.meta;
              } else if (folderContext === FolderContext.typeDefs && folderPathLower.indexOf("/script_modules") >= 0) {
                newJsonType = ProjectItemType.scriptTypesJson;
                project.role = ProjectRole.documentation;
              } else if (
                folderContext === FolderContext.typeDefs &&
                folderPathLower.indexOf("/vanilladata_modules") >= 0
              ) {
                newJsonType = ProjectItemType.vanillaDataJson;
                project.role = ProjectRole.documentation;
              } else if (folderContext === FolderContext.typeDefs && folderPathLower.indexOf("/engine_modules") >= 0) {
                newJsonType = ProjectItemType.engineOrderingJson;
                project.role = ProjectRole.documentation;
              }
              // these need to be near the bottom since URL segments like /items/, /blocks/, /entities etc. could theoretically be used in loot_tables, etc. and that should take precedence in detection
              else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/items/") >= 0) {
                newJsonType = ProjectItemType.itemTypeBehavior;
              } else if (folderContext === FolderContext.behaviorPack && folderPathLower.indexOf("/blocks/") >= 0) {
                newJsonType = ProjectItemType.blockTypeBehavior;
              } else if (
                isResourcePack &&
                (folderPathLower.indexOf("/entities/") >= 0 || folderPathLower.indexOf("/entity/") >= 0)
              ) {
                newJsonType = ProjectItemType.entityTypeResource;
              } else if (
                folderContext === FolderContext.behaviorPack &&
                (folderPathLower.indexOf("/entities/") >= 0 || folderPathLower.indexOf("/entity/") >= 0)
              ) {
                newJsonType = ProjectItemType.entityTypeBehavior;
              } else {
                // Log.debugAlert("General JSON file found: " + projectPath);
              }

              project.ensureItemByProjectPath(
                projectPath,
                ProjectItemStorageType.singleFile,
                itemName,
                newJsonType,
                folderContext,
                source,
                ProjectItemCreationType.normal,
                candidateFile,
                undefined,
                isInWorld
              );
            } else {
              project.addUnknownFile(candidateFile);
            }
          } else if (pi && projectPath !== undefined) {
            if (
              pi.itemType === ProjectItemType.MCWorld ||
              pi.itemType === ProjectItemType.MCProject ||
              pi.itemType === ProjectItemType.MCTemplate ||
              pi.itemType === ProjectItemType.MCAddon ||
              pi.itemType === ProjectItemType.MCPack ||
              pi.itemType === ProjectItemType.zip
            ) {
              await project.inferProjectItemsFromZipFile(projectPath, candidateFile, force);
            }
          }
        }
      }
    }

    for (const folderName in folder.folders) {
      const childFolder = folder.folders[folderName];

      if (childFolder && !childFolder.errorStatus) {
        const name = StorageUtilities.canonicalizeName(folderName);

        if (name === "build" || name === "out" || name === "dist") {
          project.distBuildFolder = folder;
        } else if (name === "lib") {
          project.libFolder = folder;
        } else if (name === "project_item_data" && folderContext === FolderContext.designPack) {
          if (!project.projectItemAccessoryFolder) {
            project.projectItemAccessoryFolder = folder;
          }
        } else if (
          (name.startsWith(".mct") || name.startsWith(".vscode") || !name.startsWith(".")) && // disallow any "." folders, except for .mct or .vscode
          name !== "project_item_data" &&
          name !== "node_modules" &&
          !childFolder.canIgnore &&
          (folderContext !== FolderContext.unknown || depth < 4) &&
          depth < 10
        ) {
          if (childFolder !== undefined) {
            await ProjectItemInference.inferProjectItemsFromFolder(
              project,
              childFolder,
              fileSystemPrefix,
              folderContext,
              variantLabel,
              isInWorld,
              rootFolder,
              depth + 1,
              source,
              force,
              processingCallback
            );
          }
        }
      }
    }
  }
}
