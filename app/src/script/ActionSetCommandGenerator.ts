import Action from "../actions/Action";
import ActionGroup from "../actions/ActionGroup";
import ActionSet from "../actions/ActionSet";
import ICommandOptions from "../actions/ICommandOptions";
import ICommandRequirements from "../actions/ICommandRequirements";

export const AUTOGENERATED_WHOLEFILE_MCFUNCTION_SEPARATOR =
  "# ===== AUTOGENERATED FILE ===== CONTENT WITHIN THIS FILE WILL BE WIPED AND UPDATED WHEN USED IN TOOLING";

export default class ActionSetCommandGenerator {
  static generateMCFunction(actionSet: ActionSet) {
    const lines = ActionSetCommandGenerator.generateCommandLines(actionSet);

    return AUTOGENERATED_WHOLEFILE_MCFUNCTION_SEPARATOR + "\n" + lines.join("\n");
  }

  static generateCommandLines(actionSet: ActionSet): string[] {
    const lines: string[] = [];

    ActionSetCommandGenerator.addCommandLines(actionSet, lines);

    return lines;
  }

  static addCommandLines(actionSet: ActionSet, lines: string[]) {
    this.addCommandGroupLines(actionSet, lines, 0, {});
  }

  static addCommandGroupLines(actionGroup: ActionGroup, lines: string[], indent: number, options: ICommandOptions) {
    const req: ICommandRequirements = {};

    for (const action of actionGroup.actions) {
      if (action instanceof Action) {
        ActionGroup.mergeCommandRequirements(req, action.getCommandRequirements(options));
      }
    }

    for (const action of actionGroup.actions) {
      if (action instanceof Action) {
        action.addCommandLines(lines, indent, options);
      }
    }
  }
}
